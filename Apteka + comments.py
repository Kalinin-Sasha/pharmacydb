def find_by_name(): # функция поиска препарата по названию (его части)
    name_product=input('Введите название препарата или его часть: ').upper() # запрашиваем название и переводим в верхний регистр
    for i in a: #перебираем все элементы списка (он тоже состоит из списка) со всеми позициями 
        if name_product in i[0]: # если первый элемент в текущем списке совпадает с введённым названием
            print(' | '.join(i)) # то выводим склееными в одну строку все элементы текущего списка

def find_outofstock_items(): # функция поиска отсутствующих товаров (НЕТ В НАЛИЧИИ)
    for i in a: # перебираем все элементы списка 
        if i[5]=='0': # если пятый элемент (отвечает за количество) равен нулю
            print(' | '.join(i[:-1])) # то выводим склееными в одну строку все элементы текущего списка, но БЕЗ последнего

def find_instock_items(): # функция поиска имеющихся товаров (ЕСТЬ В НАЛИЧИИ))
    for i in a: # перебираем элементы списка 
        if int(i[5])>0: # если пятый элемент текущего списка (отвечает за количество) больше нуля
            print(' | '.join(i))  # то выводим склееными в одну строку все элементы текущего списка      
            
def find_by_country(): # функция поиска препарата по стране-производителю')
    country=input('Введите интереcующую страну производства: ').upper() # запрашиваем название и переводим в верхний регистр
    for i in a: # перебираем элементы списка 
        if country in i[2]: # если введённое название есть во втором элементе текущего списка (отвечает за страну производства)
            print(' | '.join(i)) # то выводим склееными в одну строку все элементы текущего списка    

def find_by_company(): # функция поиска препарата определённой фирмы
    company=input('Введите название фирмы-производителя: ').upper() # запрашиваем название и переводим в верхний регистр
    for i in a: # перебираем элементы списка
        if company in i[1]:  # если введённое название есть в первом элементе текущего списка (отвечает за фирму-производителя)
            print(' | '.join(i)) # то выводим склееными в одну строку все элементы текущего списка    

def expensive_and_cheapest(): # функция поиска cамого дорогого и самого дешёвого товара
    mn=9999999 # инициализиуем переменную для минимуму, задав огромное начальное значение
    mx=0 # инициализиуем переменную для максимума, задав нулевое начальное значение
    for i in a: # перебираем элементы списка
        if int((i[3][:-3]))>mx: # с помощью среза в 3-ем элемента получаем цену и сравниваем с текущим максимумом
            mx=int((i[3][:-3]))
            expensive=i # запоминаем текущий элемент, где был самый дорогой товар
        if int((i[3][:-3]))<mn: # с помощью среза в 3-ем элемента получаем цену и сравниваем с текущим минимумом
            mn=int((i[3][:-3]))
            cheapest=i # запоминаем текущий элемент, где был самый дешёвый товар
    print('Сымый дорогой товар:',*expensive) # выводим на экран 
    print('Сымый дешёвый товар:',*cheapest)  # в виде строки, а не списка
    
def del_item(): # функция удаления позиции
    name_to_del=input('Введите полное название товара для его удаления: ') # запрашиваем название 
    with open("1.sst", "w") as f: # открываем файл с базой данных, но уже в режиме для записи
        for i in lines: # проходимся по всем его строкам 
            if name_to_del not in i: # если искомого названия товара нет в текущей строке,
                f.write(i)   # то записываем эту строку в пересоздаваемый файл
                
def add_item():  # функция добавления новой позиции
    x1=input('Введите полное наименование товара: ').upper()
    x2=input('Введите фирму-производителя: ').upper()
    x3=input('Введите страну происхождения: ').upper()             # запрашиваем у пользователя данные
    x4=input('Введите розничную цену: ').upper()
    x5=input('Введите закупочную цену: ').upper()
    x6=input('Введите количество товара: ').upper()
    with open("1.sst", "a") as f:  # открываем файл с базой данных, но уже в режиме добавления
        f.write(';;;;;;;;;;;'+x1+';'+x2+';'+x3+';'+x4+';'+x5+';'+x6+';;;;;\n') # записываем в конец файла строку состоящую из введённых данных согласно шаблону файла типа SST
        

def mejdu(): # функция поиска товаров в определённом диапазоне цен
    c1=int(input('Введите нижнюю границу цены: ')) # запрашиваем от какой цены искать и переводим числовой формат integer
    c2=int(input('Введите верхнюю границу цены: ')) # запрашиваем до какой цены искать и переводим числовой формат integer
    for i in a: # перебираем элементы списка
        if int((i[3][:-3]))>=c1 and int((i[3][:-3]))<=c2: # если цена товара (получена с помощью среза из 3-го элемента) подходит
            print(' | '.join(i))    # то выводим склееными в одну строку все элементы текущего списка    

def edit_count(): # Изменение количества
    name_product=input('Введите название препарата или его часть: ').upper() # запрашиваем название
    found=False # заводим переменную логического типа, изначально не веря, что такой товар есть
    for i in a:  # перебираем элементы списка
        if name_product in i[0]: # если название есть в 1-ом элементе списка
            found = True # меняем значение переменной на истину
            print(' | '.join(i)) # и выводим позицию на экране пользователя
    if not found: # проверяем, что если значение переменной не изменилось и остало ложным
        print('Позиция не найдена') #то выводим на экран сообщение о нудачном поиске
    else:        
        print('Вы уверены, что хотите изменить количество? (Да/Нет)') # проверка намерений
        q=input('>>_').upper() # получение ответа
        if q=='ДА':
            print('[1] Добавить\n[2] Убавить\n') # вывод подменю для редактирования
            q=input('>>_') # получение выбора
            new_kol=int(input('Введите изменение количества: ')) # запрос на сколько изменить количество
            if q=='2':
                new_kol=-new_kol # изменение знака переменной, если был выбран пункт "Убавить"
                
            with open("1.sst", "w") as f: # открываем файл с базой данных, но уже в режиме для записи
                for i in a: # перебираем элементы нашего списка в памяти
                    if name_product not in i[0]: # если название не совпадает
                        f.write(';;;;;;;;;;;'+i[0]+';'+i[1]+';'+i[2]+';'+i[3]+';'+i[4]+';'+i[5]+';;;;;\n')  # то заносим его в файл     
                    else:        # иначе записываем строку, но с изменнёным значением из соответствующей переменной
                        f.write(';;;;;;;;;;;'+i[0]+';'+i[1]+';'+i[2]+';'+i[3]+';'+i[4]+';'+str(int(i[5])+new_kol) +';;;;;\n')
        else:
            menu() # вывод меню, если пользователь передумал изменять
            
    
    
 
def menu():  # Процедура вывода МЕНЮ на экран
    print("\n" * 100)
    print('\n* * * АПТЕКА * * *\n')
    print('1) Поиск препарата по названию (его части)')
    print('2) Список отсутствующих товаров (НЕТ В НАЛИЧИИ)')
    print('3) Список имеющихся товаров (ЕСТЬ В НАЛИЧИИ)')
    print('4) Поиск препарата по стране-производителю')
    print('5) Поиск препарата определённой фирмы')
    print('6) Самое дорогой и самый дешёвый товар')
    print('7) Удаление позиции по названию')
    print('8) Добавление новой позиции')
    print('9) Товары в диапазоне цен')
    print('10) Изменение количества')
    print('\n0) ВЫХОД\n')
    
# ↓↓↓ Основная программа ↓↓↓

while True:
    
    with open("1.sst", "r") as f: # открытие файла в режиме для чтения
        lines = f.readlines() # считываем все строки файла в переменную lines
        
    a=[i[11:-6].split(';') for i in lines if len(i)>25 ] # формируем список из данных без шаблонных занков ; и только строк длиной больше 25 символов
        
    menu() # вывод меню на экран
    vib=input('Выберите пункт: ') # запрос у пользователя выбранного пункта меню
    match vib:   # оперетор выбора для вызова фукнции соответствующей указанному значению
        case '1':
            find_by_name()
        case '2':
            find_outofstock_items()
        case '3':
            find_instock_items()
        case '4':    
            find_by_country()
        case '5':
            find_by_company()
        case '6':
            expensive_and_cheapest()
        case '7':
            del_item()
        case '8':
            add_item()
        case '9':
            mejdu()
        case '10':
            edit_count()
        case '0':
            print('# # # РАБОТА ЗАВЕРШЕНА # # #')
            exit()
    input('\nНажмите ENTER для возврата в меню...') # самодельная пауза для удобства навигации
